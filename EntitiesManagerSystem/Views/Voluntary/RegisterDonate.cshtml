@{
    ViewBag.Title = "register-donate";
}

@using System.Web.Mvc.Html
@model EntitiesManagerSystem.Models.Voluntary.Donation

<div class="element-wrapper col-8 mx-auto">
    <h6 class="element-header">Realizar Doação</h6>
    <div class="element-box">

        @using (Html.BeginForm("SaveDonation", "Voluntary", FormMethod.Post))
        {
            <h5 class="form-header">Cadastro de Doações</h5>
            <div class="form-desc">
                Cadastre aqui o que você deseja doar, para que a entidade com interesse possa requisitar.
            </div>
            
            
            <div class="form-group">
                <label>@Html.LabelFor(m => m.Title)</label>
                @Html.TextBoxFor(m => m.Title, new {@class = "form-control"})
                @Html.ValidationMessageFor(m => m.Title, "", new {@class = "help-block form-text with-errors form-control-feedback"})
            </div>

            
            <div class="form-group">
                <label>@Html.LabelFor(m => m.Description)</label>
                @Html.TextAreaFor(m => m.Description, new {@class = "form-control"})
                @Html.ValidationMessageFor(m => m.Description, "", new {@class = "help-block form-text with-errors form-control-feedback"})
            </div>
            
            <div class="form-group">
                <label for=""> Afinidades</label>
                <select id="multiple_select_affinity" class="form-control select2" multiple="true">
                    @foreach (var affinity in ViewBag.affinities)
                    {
                        <option value="@affinity.AffinityId">@affinity.Name</option>    
                    }
                </select>
            </div>
            @Html.TextBoxFor(m => m.Affinity, new {@id = "affinities_array", @type = "hidden", @class = "form-control"})
            <div class="form-group">
                <label>@Html.LabelFor(m => m.Quantity)</label>
                @Html.TextBoxFor(m => m.Quantity, new {@class = "form-control"})
                @Html.ValidationMessageFor(m => m.Quantity, "", new {@class = "help-block form-text with-errors form-control-feedback"})
            </div>
            
            <div class="form-check">
                <label class="form-check-label">
                    @Html.CheckBoxFor(m => m.takeDonation, new {@class = "form-check-input take_donation"})
                    Preciso que a doação seja retirada no local.
                </label>
            </div>

            <fieldset id="collect_donation_address" class="form-group" style="display: none">
                <legend>
                    <span>Endereço de retirada da doação</span>
                </legend>

                <div class="row">
                    <div class="form-group col-sm-2">
                        <label>@Html.LabelFor(m => m.Address.CEP)</label>
                        @Html.TextBoxFor(m => m.Address.CEP, new {@id = "cep", @class = "mask_cep form-control"})
                        @Html.ValidationMessageFor(m => m.Address.CEP, "", new {@class = "help-block form-text with-errors form-control-feedback"})
                    </div>
                    <div class="form-group col-sm-8">
                        <div class="form-group">
                            <label>@Html.LabelFor(m => m.Address.Avenue)</label>
                            @Html.TextBoxFor(m => m.Address.Avenue, new {@class = "autocomplete-address form-control"})
                            @Html.ValidationMessageFor(m => m.Address.Avenue, "", new {@class = "help-block form-text with-errors form-control-feedback"})
                        </div>
                    </div>
                    <div class="form-group col-sm-2">
                        <div class="form-group">
                            <label>@Html.LabelFor(m => m.Address.Number)</label>
                            @Html.TextBoxFor(m => m.Address.Number, new {@class = "form-control"})
                            @Html.ValidationMessageFor(m => m.Address.Number, "", new {@class = "help-block form-text with-errors form-control-feedback"})
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label>@Html.LabelFor(m => m.Address.Neighborhood)</label>
                    @Html.TextBoxFor(m => m.Address.Neighborhood, new {@class = "autocomplete-neighborhood form-control"})
                    @Html.ValidationMessageFor(m => m.Address.Neighborhood, "", new {@class = "help-block form-text with-errors form-control-feedback"})
                </div>
                <div class="row">
                    <div class="col-sm-8">
                        <div class="form-group">
                            <label>@Html.LabelFor(m => m.Address.City)</label>
                            @Html.TextBoxFor(m => m.Address.City, new {@class = "autocomplete-city form-control"})
                            @Html.ValidationMessageFor(m => m.Address.City, "", new {@class = "help-block form-text with-errors form-control-feedback"})
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group">
                            <label>@Html.LabelFor(m => m.Address.State)</label>
                            @Html.DropDownListFor(model => model.Address.State, new SelectList(
                                new List<Object>
                                {
                                    new {value = "AC", text = "AC"},
                                    new {value = "AL", text = "AL"},
                                    new {value = "AM", text = "AM"},
                                    new {value = "AP", text = "AP"},
                                    new {value = "BA", text = "BA"},
                                    new {value = "CE", text = "CE"},
                                    new {value = "DF", text = "DF"},
                                    new {value = "ES", text = "ES"},
                                    new {value = "GO", text = "GO"},
                                    new {value = "MA", text = "MA"},
                                    new {value = "MG", text = "MG"},
                                    new {value = "MS", text = "MS"},
                                    new {value = "MT", text = "MT"},
                                    new {value = "PA", text = "PA"},
                                    new {value = "PB", text = "PB"},
                                    new {value = "PE", text = "PE"},
                                    new {value = "PI", text = "PI"},
                                    new {value = "PR", text = "PR"},
                                    new {value = "RJ", text = "RJ"},
                                    new {value = "RN", text = "RN"},
                                    new {value = "RO", text = "RO"},
                                    new {value = "RR", text = "RR"},
                                    new {value = "RS", text = "RS"},
                                    new {value = "SC", text = "SC"},
                                    new {value = "SE", text = "SE"},
                                    new {value = "SP", text = "SP"},
                                    new {value = "TO", text = "TO"}
                                },
                                "value",
                                "text",
                                "RS"), new {@class = "autocomplete-state form-control"})
                            @Html.ValidationMessageFor(m => m.Address.State, "", new {@class = "help-block form-text with-errors form-control-feedback"})
                        </div>
                    </div>
                </div>
             </fieldset>

            <div class="form-buttons-w">
                <button class="btn btn-primary" type="submit">
                    Enviar
                </button>
            </div>
        }
    </div>
</div>
@Scripts.Render("~/Template/bower_components/jquery/dist/jquery.min.js")
@Scripts.Render("~/Template/bower_components/select2/dist/js/select2.full.min.js")
@Scripts.Render("~/Scripts/jquery.autocomplete-address.min.js")
@Scripts.Render("~/Scripts/jquery.mask.min.js")
@Scripts.Render("~/Scripts/input_file.js")
@Scripts.Render("~/Scripts/main.js")

<script>

    $(document).ready(function() {

        //Quando o form retorna com algum erro, este método verifica se existe valor no input affinity, 
        //e seleciona os valores correspondentes no select2 
        if ($('#affinities_array').val()) {
            let affinities = JSON.parse($('#affinities_array').val());
            let values_select = [];
            affinities.forEach(function(a) {
                values_select.push(a.value)
            });
            $("#multiple_select_affinity").val(values_select).change()
        }
    })

//Sempre que ocorre um evento no select2, selecionando ou deselecionando uma afinidade,
//este método captura o evento e salva uma string no input affinity com os valores do select2
    $("#multiple_select_affinity").on("select2:select select2:unselect",
        function(e) {
            let values_selected = $(this).select2('data');
            let values_input = [];
            values_selected.forEach(function(value) {
                values_input.push({
                    'value': value.id,
                    'text': value.text
                })
            });
            $('#affinities_array').val(JSON.stringify(values_input))
        })

</script>

@section scripts {
    <script>

        $(document).ready(function() {
            if ($('.take_donation').is(':checked')) {
                $('#collect_donation_address').show()
            }
        })

        $('.take_donation').on('change',
            function() {
                if ($(this).is(':checked')) {
                    $('#collect_donation_address').show('slow')
                } else {
                    $('#collect_donation_address').hide('slow')
                }
            })

        $(document).ready(function() {
    
            //Quando o form retorna com algum erro, este método verifica se existe valor no input affinity, 
            //e seleciona os valores correspondentes no select2 
            if($('#affinities_array').val()){
                let affinities = JSON.parse($('#affinities_array').val());
                let values_select = [];
                affinities.forEach(function(a) {
                    values_select.push(a.value)
                });
                $("#multiple_select_affinity").val(values_select).change()
            }
        })

        //Sempre que ocorre um evento no select2, selecionando ou deselecionando uma afinidade,
        //este método captura o evento e salva uma string no input affinity com os valores do select2
        $("#multiple_select_affinity").on("select2:select select2:unselect", function (e) {
            let values_selected = $(this).select2('data');
            let values_input = [];
            values_selected.forEach(function(value) {
                values_input.push({
                    'value':value.id,
                    'text':value.text
                })
            });
            $('#affinities_array').val(JSON.stringify(values_input))
        })

    </script>
}