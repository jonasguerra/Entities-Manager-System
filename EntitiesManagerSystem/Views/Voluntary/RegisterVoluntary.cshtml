@{
    ViewBag.Title = "register-voluntary";
    Layout = null;
}

@using System.Web.Mvc.Html
@model EntitiesManagerSystem.Models.Voluntary.Voluntary

<!DOCTYPE html>
<html>
<head>
    <title>Registro</title>
    <meta charset="UTF-8">
    <meta content="ie=edge" http-equiv="x-ua-compatible">
    <meta content="template language" name="keywords">
    <meta content="Tamerlan Soziev" name="author">
    <meta content="Admin dashboard html template" name="description">
    <meta content="width=device-width, initial-scale=1" name="viewport">
    <link href="~/Template/img/ong.png" rel="shortcut icon">
    <link href="apple-touch-icon.png" rel="apple-touch-icon">
    @Styles.Render("~/Template/bower_components/select2/dist/css/select2.min.css")
    @Styles.Render("~/Template/bower_components/bootstrap-daterangepicker/daterangepicker.css")
    @Styles.Render("~/Template/bower_components/dropzone/dist/dropzone.css")
    @Styles.Render("~/Template/bower_components/datatables.net-bs/css/dataTables.bootstrap.min.css")
    @Styles.Render("~/Template/bower_components/fullcalendar/dist/fullcalendar.min.css")
    @Styles.Render("~/Template/bower_components/perfect-scrollbar/css/perfect-scrollbar.min.css")
    @Styles.Render("~/Template/bower_components/slick-carousel/slick/slick.css")
    @Styles.Render("~/Template/css/main.css?version=4.4.1")
    @Styles.Render("~/Content/input_file.css")
    @Styles.Render("~/Content/main.css")
</head>
<body>
<div class="all-wrapper menu-side with-pattern">
    <div class="row">
        <div class="auth-box-w wider col-10 register-mod">
            <div class="logo-w">
                <img alt="" src="~/Template/img/ong.png">
            </div>
            <h4 class="auth-header">Novo Voluntário</h4>
            @using (Html.BeginForm("SaveVoluntary", "Voluntary", FormMethod.Post))
            {
                <legend>
                    <span>Dados Cadastrais</span>
                </legend>
                <div class="row">
                    <div class="form-group col-sm-6">
                        <label>@Html.LabelFor(m => m.Name)</label>
                        @Html.TextBoxFor(m => m.Name, new {@class = "form-control"})
                        @Html.ValidationMessageFor(m => m.Name, "", new {@class = "help-block form-text with-errors form-control-feedback"})
                    </div>
                    <div class="form-group col-sm-6">
                        <label> @Html.LabelFor(m => m.Email)</label>
                        @Html.TextBoxFor(m => m.Email, new {@class = "form-control"})
                        @Html.ValidationMessageFor(m => m.Email, "", new {@class = "help-block form-text with-errors form-control-feedback"})
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label> @Html.LabelFor(m => m.Password)</label>
                            @Html.TextBoxFor(m => m.Password, new {@class = "form-control"})
                            @Html.ValidationMessageFor(m => m.Password, "", new {@class = "help-block form-text with-errors form-control-feedback"})
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label> @Html.LabelFor(m => m.ConfirmPassword)</label>
                            @Html.TextBoxFor(m => m.ConfirmPassword, new {@class = "form-control"})
                            @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new {@class = "help-block form-text with-errors form-control-feedback"})
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-sm-6">
                        <div class="form-group">
                            <label> @Html.LabelFor(m => m.Phone)</label>
                            @Html.TextBoxFor(m => m.Phone, new {@class = "form-control mask_phone"})
                            @Html.ValidationMessageFor(m => m.Phone, "", new {@class = "help-block form-text with-errors form-control-feedback"})
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label>@Html.LabelFor(m => m.SocialNetwork)</label>
                            @Html.TextBoxFor(m => m.SocialNetwork, new {@class = "form-control"})
                            @Html.ValidationMessageFor(m => m.SocialNetwork, "", new {@class = "help-block form-text with-errors form-control-feedback"})
                        </div>
                    </div>
                </div>
                <legend>
                    <span>Endereço</span>
                </legend>
                <div class="row">
                    <div class="form-group col-sm-2">
                        <div class="form-group">
                            <label>@Html.LabelFor(m => m.Address.CEP)</label>
                            @Html.TextBoxFor(m => m.Address.CEP, new {@id = "cep", @class = "mask_cep form-control"})
                            @Html.ValidationMessageFor(m => m.Address.CEP, "", new {@class = "help-block form-text with-errors form-control-feedback"})
                        </div>
                    </div>
                    <div class="form-group col-sm-8">
                        <div class="form-group">
                            <label>@Html.LabelFor(m => m.Address.Avenue)</label>
                            @Html.TextBoxFor(m => m.Address.Avenue, new {name = "address", @class = "autocomplete-address form-control"})
                            @Html.ValidationMessageFor(m => m.Address.Avenue, "", new {@class = "help-block form-text with-errors form-control-feedback"})
                        </div>
                    </div>
                    <div class="form-group col-sm-2">
                        <div class="form-group">
                            <label>@Html.LabelFor(m => m.Address.Number)</label>
                            @Html.TextBoxFor(m => m.Address.Number, new {name = "street_number", @class = "autocomplete-address form-control"})
                            @Html.ValidationMessageFor(m => m.Address.Number, "", new {@class = "help-block form-text with-errors form-control-feedback"})
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label>@Html.LabelFor(m => m.Address.Neighborhood)</label>
                    @Html.TextBoxFor(m => m.Address.Neighborhood, new {name = "neighborhood", @class = "autocomplete-neighborhood form-control"})
                    @Html.ValidationMessageFor(m => m.Address.Neighborhood, "", new {@class = "help-block form-text with-errors form-control-feedback"})
                </div>
                <div class="row">
                    <div class="col-sm-8">
                        <div class="form-group">
                            <label>@Html.LabelFor(m => m.Address.City)</label>
                            @Html.TextBoxFor(m => m.Address.City, new {name = "city", @class = "autocomplete-city form-control"})
                            @Html.ValidationMessageFor(m => m.Address.City, "", new {@class = "help-block form-text with-errors form-control-feedback"})
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group">
                            <label>@Html.LabelFor(m => m.Address.State)</label>
                            @Html.DropDownListFor(model => model.Address.State, new SelectList(
                                new List<Object>
                                {
                                    new {value = "AC", text = "AC"},
                                    new {value = "AL", text = "AL"},
                                    new {value = "AM", text = "AM"},
                                    new {value = "AP", text = "AP"},
                                    new {value = "BA", text = "BA"},
                                    new {value = "CE", text = "CE"},
                                    new {value = "DF", text = "DF"},
                                    new {value = "ES", text = "ES"},
                                    new {value = "GO", text = "GO"},
                                    new {value = "MA", text = "MA"},
                                    new {value = "MG", text = "MG"},
                                    new {value = "MS", text = "MS"},
                                    new {value = "MT", text = "MT"},
                                    new {value = "PA", text = "PA"},
                                    new {value = "PB", text = "PB"},
                                    new {value = "PE", text = "PE"},
                                    new {value = "PI", text = "PI"},
                                    new {value = "PR", text = "PR"},
                                    new {value = "RJ", text = "RJ"},
                                    new {value = "RN", text = "RN"},
                                    new {value = "RO", text = "RO"},
                                    new {value = "RR", text = "RR"},
                                    new {value = "RS", text = "RS"},
                                    new {value = "SC", text = "SC"},
                                    new {value = "SE", text = "SE"},
                                    new {value = "SP", text = "SP"},
                                    new {value = "TO", text = "TO"}
                                },
                                "value",
                                "text",
                                "RS"), new {@class = "autocomplete-state form-control"})
                            @Html.ValidationMessageFor(m => m.Address.State, "", new {@class = "help-block form-text with-errors form-control-feedback"})
                        </div>
                    </div>

                </div>
                <legend>
                    <span>Atuação</span>
                </legend>
                <div class="form-group">
                    <label for=""> Afinidades</label>
                    <select id="multiple_select_affinity" class="form-control select2" multiple="true">
                        @foreach (var affinity in ViewBag.affinities)
                        {
                            <option value="@affinity.AffinityId">@affinity.Name</option>    
                        }
                    </select>
                </div>
@*                 <div class="form-group"> *@
@*                     <label path="photo">Foto</label> *@
@*                     <div class="attachment attachment--image"> *@
@*                         <input onchange="changePhoto(this)" class="file" type="file" id="photo" name="photo" accept=".jpg,.jpeg,.png,.gif"/> *@
@*                         <div class="attachment--label"> *@
@*                             <span class="placeholder">Imagem (jpg, jpeg, png, gif)</span> *@
@*                             <span class="file-name"></span> *@
@*                             <span class="attachment--remove">Remover</span> *@
@*                         </div> *@
@*                         <div class="attachment--error"></div> *@
@*                     </div> *@
@*                 </div> *@
                @Html.TextBoxFor(m => m.Affinity, new {@id="affinities_array", @type="hidden", @class = "form-control"})
                <div class="buttons-w">
                    <button class="btn btn-primary">Cadastrar</button>
                </div>
                <a class="register-link" href="@Url.Action("Login", "Login")">Já sou cadastrado</a>
            }
        </div>
    </div>
</div>
@Scripts.Render("~/Template/bower_components/jquery/dist/jquery.min.js")
@Scripts.Render("~/Template/bower_components/select2/dist/js/select2.full.min.js")
@Scripts.Render("~/Scripts/jquery.autocomplete-address.min.js")
@Scripts.Render("~/Scripts/jquery.mask.min.js")
@Scripts.Render("~/Scripts/input_file.js")
@Scripts.Render("~/Scripts/main.js")

<script>

$(document).ready(function() {
  if($('#affinities_array').val()){
      let affinities = JSON.parse($('#affinities_array').val());
      let values_select = [];
      affinities.forEach(function(a) {
          values_select.push(a.value)
      });
      $("#multiple_select_affinity").val(values_select).change()
  }
})


$("#multiple_select_affinity").on("select2:select select2:unselect", function (e) {
    let values_selected = $(this).select2('data');
    let values_input = [];
    values_selected.forEach(function(value) {
        values_input.push({
            'value':value.id,
            'text':value.text
        })
    });
    $('#affinities_array').val(JSON.stringify(values_input))
})

</script>

</body>
</html>
